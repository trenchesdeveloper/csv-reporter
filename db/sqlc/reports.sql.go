// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reports.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReport = `-- name: CreateReport :one
INSERT INTO reports (
    user_id,
    report_type,
    output_file_path,
    download_url,
    download_expires_at,
    error_message,
    started_at,
    failed_at,
    completed_at
) VALUES (
             $1,  -- user_id
             $2,  -- report_type
             $3,  -- output_file_path
             $4,  -- download_url
             $5,  -- download_expires_at
             $6,  -- error_message
             $7,  -- started_at
             $8,  -- failed_at
             $9   -- completed_at
         )
RETURNING user_id, id, report_type, output_file_path, download_url, download_expires_at, error_message, created_at, started_at, failed_at, completed_at
`

type CreateReportParams struct {
	UserID            uuid.UUID      `json:"user_id"`
	ReportType        string         `json:"report_type"`
	OutputFilePath    sql.NullString `json:"output_file_path"`
	DownloadUrl       sql.NullString `json:"download_url"`
	DownloadExpiresAt sql.NullTime   `json:"download_expires_at"`
	ErrorMessage      sql.NullString `json:"error_message"`
	StartedAt         sql.NullTime   `json:"started_at"`
	FailedAt          sql.NullTime   `json:"failed_at"`
	CompletedAt       sql.NullTime   `json:"completed_at"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.UserID,
		arg.ReportType,
		arg.OutputFilePath,
		arg.DownloadUrl,
		arg.DownloadExpiresAt,
		arg.ErrorMessage,
		arg.StartedAt,
		arg.FailedAt,
		arg.CompletedAt,
	)
	var i Report
	err := row.Scan(
		&i.UserID,
		&i.ID,
		&i.ReportType,
		&i.OutputFilePath,
		&i.DownloadUrl,
		&i.DownloadExpiresAt,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FailedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteReport = `-- name: DeleteReport :exec

DELETE FROM reports
WHERE
    user_id = $1  -- UUID
  AND id      = $2
`

type DeleteReportParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

// UUID
func (q *Queries) DeleteReport(ctx context.Context, arg DeleteReportParams) error {
	_, err := q.db.ExecContext(ctx, deleteReport, arg.UserID, arg.ID)
	return err
}

const getReport = `-- name: GetReport :one
SELECT
    user_id,
    id,
    report_type,
    output_file_path,
    download_url,
    download_expires_at,
    error_message,
    created_at,
    started_at,
    failed_at,
    completed_at
FROM reports
WHERE
    user_id = $1  -- UUID
  AND id      = $2
`

type GetReportParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) GetReport(ctx context.Context, arg GetReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, getReport, arg.UserID, arg.ID)
	var i Report
	err := row.Scan(
		&i.UserID,
		&i.ID,
		&i.ReportType,
		&i.OutputFilePath,
		&i.DownloadUrl,
		&i.DownloadExpiresAt,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FailedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateReport = `-- name: UpdateReport :one

UPDATE reports
SET
    output_file_path = $2,  -- VARCHAR
    download_url = $3,  -- VARCHAR
    download_expires_at = $4,  -- TIMESTAMPTZ
    error_message = $5,  -- VARCHAR
    started_at = $6,  -- TIMESTAMPTZ
    failed_at = $7,  -- TIMESTAMPTZ
    completed_at = $8   -- TIMESTAMPTZ
WHERE
    user_id = $1  -- UUID
  AND id      = $9 -- UUID
RETURNING
    user_id,
    id,
    report_type,
    output_file_path,
    download_url,
    download_expires_at,
    error_message,
    created_at,
    started_at,
    failed_at,
    completed_at
`

type UpdateReportParams struct {
	UserID            uuid.UUID      `json:"user_id"`
	OutputFilePath    sql.NullString `json:"output_file_path"`
	DownloadUrl       sql.NullString `json:"download_url"`
	DownloadExpiresAt sql.NullTime   `json:"download_expires_at"`
	ErrorMessage      sql.NullString `json:"error_message"`
	StartedAt         sql.NullTime   `json:"started_at"`
	FailedAt          sql.NullTime   `json:"failed_at"`
	CompletedAt       sql.NullTime   `json:"completed_at"`
	ID                uuid.UUID      `json:"id"`
}

// UUID
func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, updateReport,
		arg.UserID,
		arg.OutputFilePath,
		arg.DownloadUrl,
		arg.DownloadExpiresAt,
		arg.ErrorMessage,
		arg.StartedAt,
		arg.FailedAt,
		arg.CompletedAt,
		arg.ID,
	)
	var i Report
	err := row.Scan(
		&i.UserID,
		&i.ID,
		&i.ReportType,
		&i.OutputFilePath,
		&i.DownloadUrl,
		&i.DownloadExpiresAt,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FailedAt,
		&i.CompletedAt,
	)
	return i, err
}
