// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (hashed_token,
                            user_id,
                            expires_at)
VALUES ($1, $2, $3)
RETURNING user_id, hashed_token, created_at, expires_at
`

type CreateRefreshTokenParams struct {
	HashedToken string    `json:"hashed_token"`
	UserID      uuid.UUID `json:"user_id"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.HashedToken, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.UserID,
		&i.HashedToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE
FROM refresh_tokens
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE
FROM refresh_tokens
WHERE hashed_token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, hashedToken string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, hashedToken)
	return err
}

const deleteUserRefreshTokens = `-- name: DeleteUserRefreshTokens :exec
DELETE
FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteUserRefreshTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserRefreshTokens, userID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT user_id, hashed_token, created_at, expires_at
FROM refresh_tokens
WHERE hashed_token = $1
  AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, hashedToken string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, hashedToken)
	var i RefreshToken
	err := row.Scan(
		&i.UserID,
		&i.HashedToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getTokenByPrimaryKey = `-- name: GetTokenByPrimaryKey :one
SELECT user_id, hashed_token, created_at, expires_at
FROM refresh_tokens
WHERE user_id = $1
  AND hashed_token = $2
`

type GetTokenByPrimaryKeyParams struct {
	UserID      uuid.UUID `json:"user_id"`
	HashedToken string    `json:"hashed_token"`
}

func (q *Queries) GetTokenByPrimaryKey(ctx context.Context, arg GetTokenByPrimaryKeyParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByPrimaryKey, arg.UserID, arg.HashedToken)
	var i RefreshToken
	err := row.Scan(
		&i.UserID,
		&i.HashedToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateRefreshTokenExpiry = `-- name: UpdateRefreshTokenExpiry :one
UPDATE refresh_tokens
SET expires_at = $2
WHERE hashed_token = $1
RETURNING user_id, hashed_token, created_at, expires_at
`

type UpdateRefreshTokenExpiryParams struct {
	HashedToken string    `json:"hashed_token"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) UpdateRefreshTokenExpiry(ctx context.Context, arg UpdateRefreshTokenExpiryParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, updateRefreshTokenExpiry, arg.HashedToken, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.UserID,
		&i.HashedToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
